//Algorithm

// export function Dijkstra(graph, cells, start, end, walls) {
//   let visitedNodesInOrder = [];
//   let unvisitedNodes = [...cells]; // Use the spread operator to create a copy of the cells array
//   let distances = {};
//   let previous = {};

//   for (let wallNode of walls) {
//     unvisitedNodes = unvisitedNodes.filter((node) => node.id !== wallNode.id);
//   }

//   // Initialize distances with Infinity for all nodes except the start node
//   for (let node of cells) {
//     distances[node.id] = node.id === start.id ? 0 : Infinity;
//     previous[node.id] = null;
//   }

//   const delay = 100; // Delay in milliseconds between each coloring operation

//   function visitNodesInOrder(nodes) {
//     for (let i = 0; i < nodes.length; i++) {
//       setTimeout(() => {
//         document.getElementById(nodes[i]).style.backgroundColor = 'rgb(0, 255, 0)';
//       }, delay * i);
//     }
//   }

//   while (unvisitedNodes.length > 0) {
//     // Find the node with the minimum distance from the unvisited nodes
//     let minDistanceNode = unvisitedNodes.reduce(
//       (minNode, node) =>
//         distances[node.id] < distances[minNode.id] ? node : minNode
//     );

//     // Remove the minimum distance node from the unvisited nodes list
//     unvisitedNodes = unvisitedNodes.filter((node) => node.id !== minDistanceNode.id);

//     // Stop if the minimum distance node is the end node
//     if (minDistanceNode.id === end.id) break;

//     // Get the neighbors of the minimum distance node from the adjacency list
//     let neighbors = graph[minDistanceNode.id].neighbors;

//     for (let neighbor of neighbors) {
//       // Calculate the tentative distance from the start node to the neighbor
//       let tentativeDistance = distances[minDistanceNode.id] + 1; // Assuming each edge has a weight of 1

//       // Update the distance and previous node if the tentative distance is shorter
//       if (tentativeDistance < distances[neighbor]) {
//         distances[neighbor] = tentativeDistance;
//         previous[neighbor] = minDistanceNode.id;
//       }
//     }

//     // Collect the visited nodes in order
//     visitedNodesInOrder.push(minDistanceNode.id);
//   }

//   // Build the shortest path by backtracking from the end node
//   let currentNode = end.id;
//   while (currentNode !== null) {
//     visitedNodesInOrder.unshift(currentNode);
//     currentNode = previous[currentNode];
//   }

//   // Animate the visited nodes
//   visitNodesInOrder(visitedNodesInOrder);

//   return visitedNodesInOrder;
// }



// class made at first

  
// export class Algorithm {
//   constructor(graph, cells, start, end, walls) {
//     this.graph = graph;
//     this.cells = cells;
//     this.start = start;
//     this.end = end;
//     this.walls = walls;
//     this.unvisitedNodes = [...cells];
//     this.distances = {};
//     this.previous = {};
//     this.visitedNodesInOrder = [];
//   }

//   restOfUnvisitedNodes() {
//     this.unvisitedNodes = this.unvisitedNodes.filter(node => !this.walls.includes(node));
//   }

//   initializeDistances() {
//     for (let node of this.cells) {
//       this.distances[node.id] = node.id === this.start.id ? 0 : Infinity;
//       this.previous[node.id] = null;
//     }
//   }

//   findMinDistanceNode() {
//     return this.unvisitedNodes.reduce(
//       (minNode, node) =>
//         this.distances[node.id] < this.distances[minNode.id] ? node : minNode
//     );
//   }

//   removeMinDistanceNode(minDistanceNode) {
//     this.unvisitedNodes = this.unvisitedNodes.filter(node => node.id !== minDistanceNode.id);
//   }

//   checkIfMinDistanceNodeIsEndNode(minDistanceNode) {
//     return minDistanceNode.id === this.end.id;
//   }

//   getNeighbors(minDistanceNode) {
//     return this.graph[minDistanceNode.id].neighbors;
//   }

//   checkIfNeighborIsWall(neighbor) {
//     return !this.walls.includes(neighbor);
//   }

//   calculateTentativeDistance(minDistanceNode) {
//     return this.distances[minDistanceNode.id] + 1;
//   }

//   updateDistanceAndPreviousNode(neighbor, minDistanceNode) {
//     if (this.calculateTentativeDistance(minDistanceNode) < this.distances[neighbor]) {
//       this.distances[neighbor] = this.calculateTentativeDistance(minDistanceNode);
//       this.previous[neighbor] = minDistanceNode.id;
//     }
//   }

//   buildVisitedNodesInOrder() {
//     while (this.unvisitedNodes.length > 0) {
//       let minDistanceNode = this.findMinDistanceNode();
//       this.removeMinDistanceNode(minDistanceNode);

//       if (this.checkIfMinDistanceNodeIsEndNode(minDistanceNode)) {
//         break;
//       }

//       let neighbors = this.getNeighbors(minDistanceNode);

//       for (let neighbor of neighbors) {
//         if (this.checkIfNeighborIsWall(neighbor)) {
//           this.updateDistanceAndPreviousNode(neighbor, minDistanceNode);
//         }
//       }

//       this.visitedNodesInOrder.push(minDistanceNode);
//     }
//   }

//   getShortestPath() {
//     let shortestPath = [];
//     let currentNode = this.end.id;

//     while (currentNode !== null) {
//       shortestPath.unshift(currentNode);
//       currentNode = this.previous[currentNode];
//     }

//     return shortestPath;
//   }

//   getVisitedNodesInOrder() {
//     return this.visitedNodesInOrder;
//   }
// }

//its implementation

  // Run Dijkstra algorithm
  // function runDijkstra() {
  //  setTimeout(function(){ let visitedNodesInOrder = Dijkstra(grid, cells, startCell, endCell, walls);
  //   for (let node of visitedNodesInOrder) {
  //     let nodeId = document.getElementById(node);
  //     if(node != startCell.id && node!=endCell.id){
  //     nodeId.style.backgroundColor = 'blue';
  //     nodeId.style.transition = '5s';
  //         }
  //   }
  // },1000);
  // }

    